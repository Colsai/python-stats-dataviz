1. Nice error handling (Anita)

# 17 - write function Code here

def function(x,y):
    if x > len(y):
        print('Sample size is larger than population. Input a number less than '+len(y))
    else:
        random_select = y.sample(x)
        random_select = random_select['TUITIONFEE_IN']
        random_mean = random_select.mean()
        total_mean = y['TUITIONFEE_IN'].mean()
        mean_diff = random_mean - total_mean
        return mean_diff
        
2. Nice commenting (Barker)

# 17 - write function Code here
def xbar_u_diff(num_ob,df):
    sample_df = df.sample(num_ob)                                   #sample the dataframe with number of observations equal to num_ob
    sample_mean = sample_df.mean()                                  #calculate the mean of the sample
    pop_mean = df.mean()                                            #calculate the pop mean
    
    sample_pop_mean_diff = sample_mean - pop_mean                   #calculate the difference
    
    return sample_pop_mean_diff                                     #return the difference
    
3. Nice using random.choice() function (several of you)

# using random.choice() to  
# get a random number  
random_file = random.choice(original_list)

My solution (no as simple):
# 3 - Write code to randomly select one file name out of the 22 files names. 
# Display the file name

i = random.randint(0, 23)
file_name = file_names[i]

4. Several of you use abs on the differences. It works but my personal preference is to keep the difference as is (positive or negative)
This plot looks better.